{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func emailPlease(email: String) = {
    let currentKey = toBase58String(i.caller.bytes)
    WriteSet([DataEntry(email + "_owner", currentKey), DataEntry(email + "_is_valid", false)])
}

@Callable(i)
func validateEmail(email: String, code: String) = {
    let isVerifiedKey = email + "_is_valid"
    let isVerified = isDefined(getBoolean(this, isVerifiedKey)) && extract(getBoolean(this, isVerifiedKey))
    if (isVerified) then throw("Email already verified")
    else {
        let key = email + "_code_hash"
        let currentKey = toBase58String(i.caller.bytes)
        let originalCode = extract(getString(this, key))
        let result = isDefined(getString(this, key)) && sha256(fromBase64String(code)) == fromBase64String(originalCode)
        if(!result) then throw("Incorrect code")
        else{
            WriteSet([
                DataEntry(email + "_is_valid", result),
                DataEntry(email + "_owner", currentKey)
            ])
        }
    }
}

@Callable(i)
func payToEmail(email: String) = {
    let isVerifiedKey = email + "_is_valid"
    let ownerKey = email + "_owner"
    let isVerified = isDefined(getBoolean(this, isVerifiedKey)) && extract(getBoolean(this, isVerifiedKey))
    let paymentReceiver = Address(fromBase58String(extract(getString(this, ownerKey))))
    let pmt = extract(i.payment)
    if (isDefined(pmt.assetId)) then throw("Can transfer Waves only")
    else {
        if (!isVerified)
            then throw("Email not verified")
        else {
            TransferSet([ScriptTransfer(paymentReceiver, pmt.amount, unit)])
        }
     }
}

@Verifier(tx)
func verify() = {
    true
}
